// –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ API —Ä–æ—É—Ç–∞ /api/auth/telegram
const API_BASE = process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : 'http://localhost:3000';

async function testAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ä–æ—É—Ç–∞ /api/auth/telegram\n');

  // –¢–µ—Å—Ç 1: POST –±–µ–∑ —Ç–µ–ª–∞
  console.log('1Ô∏è‚É£ POST –±–µ–∑ —Ç–µ–ª–∞ ‚Üí –æ–∂–∏–¥–∞—Ç—å Missing initData');
  try {
    const res1 = await fetch(`${API_BASE}/api/auth/telegram`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });
    const result1 = await res1.json();
    console.log(`   –°—Ç–∞—Ç—É—Å: ${res1.status}, –û—Ç–≤–µ—Ç:`, result1);
    
    if (res1.status === 400 && result1.error === 'Missing initData') {
      console.log('   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω\n');
    } else {
      console.log('   ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω\n');
    }
  } catch (e) {
    console.log('   ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', e.message, '\n');
  }

  // –¢–µ—Å—Ç 2: POST —Å –ø—É—Å—Ç—ã–º initData
  console.log('2Ô∏è‚É£ POST —Å –ø—É—Å—Ç—ã–º initData ‚Üí –æ–∂–∏–¥–∞—Ç—å Missing initData');
  try {
    const res2 = await fetch(`${API_BASE}/api/auth/telegram`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ initData: '' })
    });
    const result2 = await res2.json();
    console.log(`   –°—Ç–∞—Ç—É—Å: ${res2.status}, –û—Ç–≤–µ—Ç:`, result2);
    
    if (res2.status === 400 && result2.error === 'Missing initData') {
      console.log('   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω\n');
    } else {
      console.log('   ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω\n');
    }
  } catch (e) {
    console.log('   ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', e.message, '\n');
  }

  // –¢–µ—Å—Ç 3: POST —Å –Ω–µ–≤–µ—Ä–Ω—ã–º initData
  console.log('3Ô∏è‚É£ POST —Å –Ω–µ–≤–µ—Ä–Ω—ã–º initData ‚Üí –æ–∂–∏–¥–∞—Ç—å Bad signature');
  try {
    const res3 = await fetch(`${API_BASE}/api/auth/telegram`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        initData: 'user=%7B%22id%22%3A123%7D&hash=invalid_hash&auth_date=1234567890'
      })
    });
    const result3 = await res3.json();
    console.log(`   –°—Ç–∞—Ç—É—Å: ${res3.status}, –û—Ç–≤–µ—Ç:`, result3);
    
    if (res3.status === 401 && result3.error === 'Bad signature') {
      console.log('   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω\n');
    } else {
      console.log('   ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω\n');
    }
  } catch (e) {
    console.log('   ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', e.message, '\n');
  }

  // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ /api/debug/env');
  try {
    const res4 = await fetch(`${API_BASE}/api/debug/env`);
    const result4 = await res4.json();
    console.log(`   –°—Ç–∞—Ç—É—Å: ${res4.status}, –û—Ç–≤–µ—Ç:`, result4);
    
    const missing = Object.entries(result4).filter(([key, value]) => 
      key !== 'node_env' && !value
    ).map(([key]) => key);
    
    if (missing.length === 0) {
      console.log('   ‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n');
    } else {
      console.log(`   ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${missing.join(', ')}\n`);
    }
  } catch (e) {
    console.log('   ‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', e.message, '\n');
  }

  console.log('üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (typeof window === 'undefined') {
  // Node.js –æ–∫—Ä—É–∂–µ–Ω–∏–µ
  const fetch = require('node-fetch');
  testAPI();
} else {
  // –ë—Ä–∞—É–∑–µ—Ä
  console.log('–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ testAPI()');
  window.testAPI = testAPI;
}