// –ò–°–ü–û–õ–¨–ó–£–ï–ú –í–ù–ï–®–ù–ò–ï –ò–ú–ü–û–†–¢–´ –ö–ê–ö –¢–†–ï–ë–£–ï–¢–°–Ø
import { supabaseAdmin } from '../../lib/supabaseAdmin';
import { verifyTelegramAuth } from '../../lib/verifyTelegramAuth';

// –ò–º–ø–æ—Ä—Ç—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å, —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª—è–µ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ lib/)

export default async function handler(req, res) {
  // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  console.log('ENV OK', {
    URL: !!process.env.NEXT_PUBLIC_SUPABASE_URL,
    SRK: !!process.env.SUPABASE_SERVICE_ROLE_KEY,
    BOT: !!process.env.TELEGRAM_BOT_TOKEN
  });

  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'POST') {
    return res.status(405).json({ ok: false, error: 'Method not allowed' });
  }

  try {
    const { initData } = req.body;
    console.log('initData length', (initData || '').length);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ initData
    if (!initData) {
      return res.status(400).json({ ok: false, error: 'Missing initData' });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    if (!botToken) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return res.status(500).json({ ok: false, error: 'Server configuration error' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å initData —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    const validation = verifyTelegramAuth(initData, botToken);
    
    if (!validation.ok) {
      console.log('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ initData –Ω–µ –ø—Ä–æ—à–ª–∞:', validation.reason);
      return res.status(401).json({ ok: false, error: 'Bad signature' });
    }

    const userData = validation.user;
    if (!userData || !userData.id) {
      return res.status(400).json({ ok: false, error: 'No user data found in initData' });
    }

    // –ü–∞—Ä—Å–∏–º telegram_id –≤ —á–∏—Å–ª–æ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    const telegramId = Number(userData.id);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
    const profile = {
      telegram_id: telegramId,
      username: userData.username ?? null,
      first_name: userData.first_name ?? null,
      last_name: userData.last_name ?? null,
      name: [userData.first_name, userData.last_name].filter(Boolean).join(' ') || userData.username || 'User',
      avatar_url: userData.photo_url ?? '/placeholder.png'
    };

    console.log('üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      telegram_id: profile.telegram_id,
      username: profile.username,
      name: profile.name
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (Supabase JS v2 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å)
    try {
      const { error } = await supabaseAdmin
        .from('users')
        .upsert(profile, { onConflict: 'telegram_id' });

      if (error) {
        // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–û–î–†–û–ë–ù–´–ô –í–´–í–û–î –û–®–ò–ë–ö–ò (24h –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞)
        console.error('‚ùå –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê SUPABASE:', {
          code: error.code,
          message: error.message,
          details: error.details,
          hint: error.hint,
          table: 'users',
          operation: 'upsert',
          profile: profile,
          fullError: error
        });
        
        return res.status(500).json({ 
          ok: false, 
          error: 'Supabase upsert failed',
          code: error.code,
          message: error.message,
          details: error.details,
          hint: error.hint
        });
      }

      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return res.status(200).json({
        ok: true,
        profile: profile
      });
    } catch (error) {
      // –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –û–®–ò–ë–û–ö
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê UPSERT:', {
        errorType: error.constructor.name,
        message: error.message,
        stack: error.stack,
        profile: profile
      });
      
      return res.status(500).json({ 
        ok: false, 
        error: 'Supabase upsert failed',
        type: error.constructor.name,
        message: error.message
      });
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    return res.status(500).json({ ok: false, error: 'Authentication failed' });
  }
}
