// –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SUPABASE
export default async function handler(req, res) {
  console.log('üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SUPABASE');

  // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const env = {
    url: process.env.NEXT_PUBLIC_SUPABASE_URL,
    service_role: process.env.SUPABASE_SERVICE_ROLE_KEY,
    anon: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    bot: process.env.TELEGRAM_BOT_TOKEN
  };

  console.log('üîç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', {
    url_exists: !!env.url,
    url_preview: env.url ? `${env.url.substring(0, 50)}...` : '–û–¢–°–£–¢–°–¢–í–£–ï–¢',
    service_role_exists: !!env.service_role,
    service_role_preview: env.service_role ? `${env.service_role.substring(0, 50)}...` : '–û–¢–°–£–¢–°–¢–í–£–ï–¢',
    anon_exists: !!env.anon,
    bot_exists: !!env.bot
  });

  // –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
  if (!env.url || !env.service_role) {
    return res.status(500).json({
      error: '–ö–†–ò–¢–ò–ß–ù–û: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase',
      missing: {
        url: !env.url,
        service_role: !env.service_role
      },
      help: '–î–æ–±–∞–≤—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Vercel ‚Üí Settings ‚Üí Environment Variables'
    });
  }

  try {
    // –®–∞–≥ 2: –ò–º–ø–æ—Ä—Ç Supabase
    console.log('üì¶ –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ @supabase/supabase-js...');
    const { createClient } = await import('@supabase/supabase-js');
    console.log('‚úÖ Supabase –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');

    // –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    console.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ Supabase –∫–ª–∏–µ–Ω—Ç–∞...');
    const supabase = createClient(env.url, env.service_role, {
      auth: { persistSession: false, autoRefreshToken: false },
      db: { schema: 'public' }
    });
    console.log('‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω');

    // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    console.log('üèÉ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ...');
    const { data: connectionTest, error: connectionError } = await supabase
      .from('users')
      .select('count', { count: 'exact', head: true });

    if (connectionError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', connectionError);
      return res.status(500).json({
        step: 'CONNECTION_FAILED',
        error: connectionError.message,
        code: connectionError.code,
        details: connectionError.details,
        hint: connectionError.hint,
        possible_causes: [
          '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SUPABASE_SERVICE_ROLE_KEY',
          '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π NEXT_PUBLIC_SUPABASE_URL',
          '–¢–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
          'RLS –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø'
        ]
      });
    }

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ users —Ä–∞–±–æ—Ç–∞–µ—Ç');

    // –®–∞–≥ 5: –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º API)
    console.log('üë§ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const testProfile = {
      telegram_id: 888888888,
      username: 'emergency_test',
      first_name: 'Emergency',
      last_name: 'Test',
      name: 'Emergency Test',
      avatar_url: '/placeholder.png',
      updated_at: new Date().toISOString()
    };

    const { data: upsertResult, error: upsertError } = await supabase
      .from('users')
      .upsert(testProfile, { 
        onConflict: 'telegram_id',
        ignoreDuplicates: false 
      })
      .select('*')
      .single();

    if (upsertError) {
      console.error('‚ùå –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê! –û—à–∏–±–∫–∞ upsert:', upsertError);
      
      // –û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω —Å–æ–∑–¥–∞–ª—Å—è —á–∞—Å—Ç–∏—á–Ω–æ
      try {
        await supabase.from('users').delete().eq('telegram_id', 888888888);
      } catch (cleanupError) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', cleanupError.message);
      }

      return res.status(500).json({
        step: 'UPSERT_FAILED',
        error: '–í–û–¢ –ù–ê–°–¢–û–Ø–©–ê–Ø –ü–†–û–ë–õ–ï–ú–ê!',
        supabase_error: {
          message: upsertError.message,
          code: upsertError.code,
          details: upsertError.details,
          hint: upsertError.hint
        },
        test_profile: testProfile,
        solutions: {
          'PGRST116': '–¢–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–π —Ç–∞–±–ª–∏—Ü—É –≤ Supabase',
          '42P01': '–¢–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–π —Ç–∞–±–ª–∏—Ü—É –≤ Supabase',
          '42501': '–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ - –ø—Ä–æ–≤–µ—Ä—å RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –≤ Supabase',
          '23505': '–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º telegram_id'
        }
      });
    }

    console.log('‚úÖ Upsert –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç!', upsertResult);

    // –®–∞–≥ 6: –û—á–∏—Å—Ç–∫–∞
    const { error: deleteError } = await supabase
      .from('users')
      .delete()
      .eq('telegram_id', 888888888);

    return res.status(200).json({
      status: 'üéâ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢!',
      message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞',
      connection_test: 'PASSED',
      upsert_test: 'PASSED',
      cleanup_test: deleteError ? 'FAILED' : 'PASSED',
      created_user: upsertResult,
      timestamp: new Date().toISOString(),
      note: '–ï—Å–ª–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª, –Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π API –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –ª–æ–≥–∏–∫–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
    });

  } catch (criticalError) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', criticalError);
    return res.status(500).json({
      step: 'CRITICAL_FAILURE',
      error: criticalError.message,
      stack: criticalError.stack,
      type: criticalError.constructor.name
    });
  }
}