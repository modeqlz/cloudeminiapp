import { createClient } from '@supabase/supabase-js';

export default async function handler(req, res) {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const envCheck = {
    url: !!process.env.NEXT_PUBLIC_SUPABASE_URL,
    service_role: !!process.env.SUPABASE_SERVICE_ROLE_KEY,
    url_value: process.env.NEXT_PUBLIC_SUPABASE_URL || 'NOT SET',
    service_role_preview: process.env.SUPABASE_SERVICE_ROLE_KEY ? 
      `${process.env.SUPABASE_SERVICE_ROLE_KEY.substring(0, 30)}...` : 'NOT SET'
  };

  if (!envCheck.url || !envCheck.service_role) {
    return res.status(500).json({
      status: 'ERROR',
      error: 'Missing Supabase environment variables',
      env_check: envCheck
    });
  }

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY,
    { 
      auth: { 
        persistSession: false,
        autoRefreshToken: false 
      },
      db: { schema: 'public' }
    }
  );

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–µ users
    console.log('üß™ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users');
    const { data: tableCheck, error: tableError } = await supabase
      .from('users')
      .select('count', { count: 'exact', head: true });

    if (tableError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ users:', tableError);
      return res.status(500).json({
        status: 'TABLE_ERROR',
        test: 'table_access',
        error: tableError.message,
        code: tableError.code,
        details: tableError.details,
        hint: tableError.hint
      });
    }

    // –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üß™ –¢–µ—Å—Ç 2: –¢–µ—Å—Ç–æ–≤—ã–π upsert –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    const testUser = {
      telegram_id: 999999999, // –¢–µ—Å—Ç–æ–≤—ã–π ID
      username: 'test_user',
      first_name: 'Test',
      last_name: 'User',
      name: 'Test User',
      avatar_url: '/placeholder.png',
      updated_at: new Date().toISOString()
    };

    const { data: upsertData, error: upsertError } = await supabase
      .from('users')
      .upsert(testUser, { 
        onConflict: 'telegram_id',
        ignoreDuplicates: false 
      })
      .select('*')
      .single();

    if (upsertError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ upsert —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', upsertError);
      return res.status(500).json({
        status: 'UPSERT_ERROR',
        test: 'user_upsert',
        error: upsertError.message,
        code: upsertError.code,
        details: upsertError.details,
        hint: upsertError.hint,
        test_user: testUser
      });
    }

    // –¢–µ—Å—Ç 3: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üß™ –¢–µ—Å—Ç 3: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    const { error: deleteError } = await supabase
      .from('users')
      .delete()
      .eq('telegram_id', 999999999);

    console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ');

    return res.status(200).json({
      status: 'SUCCESS',
      message: 'Database connection and operations working correctly',
      tests: {
        table_access: 'PASSED',
        user_upsert: 'PASSED', 
        user_delete: deleteError ? 'FAILED' : 'PASSED'
      },
      env_check: envCheck,
      table_count: tableCheck,
      test_user_created: upsertData,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã:', error);
    return res.status(500).json({
      status: 'CRITICAL_ERROR',
      error: error.message,
      stack: error.stack,
      env_check: envCheck
    });
  }
}